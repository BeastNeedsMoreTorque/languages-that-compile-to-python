* List of languages that compile to Python
** Dg - it's a Python ! No, it's a Haskell !

| sources | [[https://github.com/pyos/dg][https://github.com/pyos/dg]] |
| doc     | [[https://pyos.github.io/dg/][https://pyos.github.io/dg/]] |
| v1 ?    | yes, april 2015            |
| created | june, 2012                 |

- compiles  to CPython  3.4. Dg is an alternative syntax to Python 3.
- compatible with all the libraries
- runs on PyPy (Got to wait for a JIT-enabled PyPy 3.3 first, though.)

*** Language features

- function calls without parenthesis:
: print "wow" "two lines" sep: "\n"
- reverse pipe operator:
: print $ "> {}: {}".format "Karkat" "Reference something other than Doge"
- pipe and reverse pipe
: print <| 'What' + 'ever.'
: 'This is the same thing ' + 'in a different direction.' |> print
- function notation (arrow =->= notation)
: function = arg1 arg2 ->
:     print (arg1.replace "Do " "Did ") arg2 sep: ", " end: ".\n"
: function "Do something" "dammit"
- infix notation (with backticks)
- function composition (with =<-=)
- first class operators
: f = (+)
: f 1 2 == 3
- partial application (and =bind= is =functools.partial=)
: f = (2 *)
: f 10 == 20
- new  functional builtins:  =foldl=  and  =foldl1=, =scanl=,  =flip=,
  =takewhile= and  =dropwhile= (from =itertools=), =take=  and =drop=,
  =iterate=, =head= and =fst=, =tail=, =snd=, =last= and =init=.
- decorators don't  need special  syntax, they're  just called  with a
  function
: wtf = the_decorator $ ->

*** Install

: pip3 install git+https://github.com/pyos/dg

*** Editors

| Gedit   | [[https://github.com/pyos/dg-gedit/][https://github.com/pyos/dg-gedit/]]    |
| Sublime | [[https://github.com/pyos/dg-textmate/][https://github.com/pyos/dg-textmate/]] |

** Hy - A dialect of Lisp that's embedded in Python

| sources     | [[https://github.com/hylang/hy/][https://github.com/hylang/hy/]] |
| doc         | [[http://hylang.org/][http://hylang.org/]]            |
| v1 ?        | no                            |
| created     | december, 2012                |
| online REPL | [[https://try-hy.appspot.com/][https://try-hy.appspot.com/]]   |

*** Install

 : pip install hy

*** Editors
 | Emacs | [[https://github.com/hylang/hy-mode][https://github.com/hylang/hy-mode]] |
 |       | and others lisp modes             |

** Mochi -  Dynamically typed functional programming language

| sources | [[https://github.com/i2y/mochi][https://github.com/i2y/mochi]] |
| doc     |                              |
| v1 ?    | no                           |
| created | v0.1 on december, 2014       |

*** Install

: pip3 install mochi

*** Editors

| Atom | [[https://github.com/i2y/language-mochi][https://github.com/i2y/language-mochi]] |

** Coconut - Simple, elegant, Pythonic functional programming

| sources | https://github.com/evhub/coconut |
| doc     | https://coconut.readthedocs.io   |
| v1 ?    | yes, on june, 2016               |
| created | february, 2015 (v0.1)            |

- Coconut compiles  to Python  (not CPython  bytecode, so  it supports
  other Python implementations: PyPy, Jython, etc)
- Coconut code runs on any major Python version, 2 or 3
- all valid Coconut is valid Python 3

- *ipython*/jupyter [[http://coconut.readthedocs.io/en/master/DOCS.html#ipython-jupyter-support][support]] (installed by default)

*** Language features
- pipelines
  : (1, 2) |*> (+) |> sq |> print
- pattern matching (=match x in value:=)
- algeabric data types
- partial application (=$= sign right after a function name)
  : expnums = map(pow$(2), range(5))
  : expnums |> list |> print
- lazy lists (surround coma-separated lists with =(|= and =|)=)
- destructuring assignment
- function composition (with =..=)
  : fog = f..g
- prettier lambdas (=->= syntax)
- parallel programming
- tail recursion optimization
- infix notation (like in Haskell with backticks)
- underscore digits separators (=10_000_000=)
- decorators support any expression
  : @ wrapper1 .. wrapper2 $(arg)
- code pass through the compiler
- ...

*** Install

: pip install coconut

*** Editors
- Pygments support

| Sublime | Coconut |

** Rabbit - a functional language on top of Python (discontinued)


| sources | https://github.com/evhub/rabbit |
| doc     |                                 |
| v1 ?    | yes, on oct, 2014. DISCONTINUED    |
| created | v0.1 on may, 2014               |

University project, discontinued.

Quicksort:

#+BEGIN_SRC
qsort(l) = (
    qsort: (as ~ \x\(x @ x<=a)) ++ a ++ qsort: (as ~ \x\(x @ x>a))
    $ a,as = l
    ) @ len:l
#+END_SRC

* Misc
** Pixie, a lightweight and native lisp
is built in RPython

- [[https://github.com/pixie-lang/pixie][https://github.com/pixie-lang/pixie]]
