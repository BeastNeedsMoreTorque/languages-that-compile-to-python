# This file is writen in org-mode http://orgmode.org
# It is to be opened  with Emacs, which will  recognize it as
# rich text.

# Vindarel 2016

#+OPTIONS: toc:4

* List of languages that compile to Python

We have *Dogelang*, *Mochi*, *Hy*, *Coconut* and *Rabbit* !

** Dg - it's a Python ! No, it's a Haskell !

#+BEGIN_HTML
 <img src="https://pyos.github.io/dg/images/seriousdawg.jpg", title="NOT'REALLYÂ®" </img>
#+END_HTML

| sources | [[https://github.com/pyos/dg][https://github.com/pyos/dg]] |
| doc     | [[https://pyos.github.io/dg/][https://pyos.github.io/dg/]] |
| v1 ?    | yes, april 2015            |
| created | june, 2012                 |

- compiles  to CPython  3.4. Dg is an alternative syntax to Python 3.
- compatible with all the libraries
- runs on PyPy (Got to wait for a JIT-enabled PyPy 3.3 first, though.)

**** Language features

 - function calls without parenthesis:
 : print "wow" "two lines" sep: "\n"
 - reverse pipe operator:
 : print $ "> {}: {}".format "Karkat" "Reference something other than Doge"
 - pipe and reverse pipe (on the same line, unlike Mochi)
 : print <| 'What' + 'ever.'
 : 'This is the same thing ' + 'in a different direction.' |> print
 - function notation (arrow =->= notation)
 : function = arg1 arg2 ->
 :     print (arg1.replace "Do " "Did ") arg2 sep: ", " end: ".\n"
 : function "Do something" "dammit"
 - infix notation (with backticks)
 - function composition (with =<-=)
 - first class operators
 : f = (+)
 : f 1 2 == 3
 - partial application (and =bind= is =functools.partial=)
 : f = (2 *)
 : f 10 == 20
 - new  functional builtins:  =foldl=  and  =foldl1=, =scanl=,  =flip=,
   =takewhile= and  =dropwhile= (from =itertools=), =take=  and =drop=,
   =iterate=, =head= and =fst=, =tail=, =snd=, =last= and =init=.
 - decorators don't  need special  syntax, they're  just called  with a
   function
 : wtf = the_decorator $ ->

**** Install

 : pip3 install git+https://github.com/pyos/dg

**** Editors

 | Gedit   | [[https://github.com/pyos/dg-gedit/][https://github.com/pyos/dg-gedit/]]    |
 | Sublime | [[https://github.com/pyos/dg-textmate/][https://github.com/pyos/dg-textmate/]] |


**** Example projects

 | dogeweb ,    a    functional     web    framework    atop    asyncio | [[https://pyos.github.io/dogeweb/][https://pyos.github.io/dogeweb/]] |

** Hy - A dialect of Lisp that's embedded in Python

#+BEGIN_HTML
<img src='http://docs.hylang.org/en/latest/_images/hy-logo-small.png', title='' </img>
#+END_HTML

| sources     | [[https://github.com/hylang/hy/][https://github.com/hylang/hy/]] |
| doc         | [[http://hylang.org/][http://hylang.org/]]            |
| v1 ?        | no                            |
| created     | december, 2012                |
| online REPL | [[https://try-hy.appspot.com/][https://try-hy.appspot.com/]]   |
| discuss     | [[https://groups.google.com/forum/#!forum/hylang-discuss][google group]]                  |
| IRC         | =hy= on freenode              |

- Hy compiles to Python bytecode (AST)
- Hy can use  python libraries, and we  can import a Hy  module into a
  Python program.

**** Language features

- it's python: context managers, named and keyword arguments, list comprehensions,...
- macros, reader macros
- threading macros (like Clojure), with =->= and =->>= (similar to pipes)
: (-> (read) (eval) (print) (loop))
#+BEGIN_SRC lisp
(import [sh [cat grep wc]])
(-> (cat "/usr/share/dict/words") (grep "-E" "^hy") (wc "-l"))  ; => 210
#+END_SRC
- [[http://docs.hylang.org/en/latest/contrib/anaphoric.html][anaphoric functions]]
: (require hy.contrib.anaphoric)
: (list (ap-map (* it 2) [1 2 3]))  ; => [2, 4, 6]
- fraction literal (like Clojure)
- unicode support (I mean for symbols)
- pattern matching (in libraries, like [[https://github.com/kirbyfan64/hyskell][Hyskell]])
- monads (in libraries, like [[https://github.com/pyx/hymn][Hymn]])

**** Install

  : pip install hy

**** Editors
  | Emacs | [[https://github.com/hylang/hy-mode][https://github.com/hylang/hy-mode]] |
  | All   | lisp modes for any editor         |


**** Example projects
| Github trending     | [[https://github.com/trending/hy][https://github.com/trending/hy]]                     |
| Live coding Blender | [[https://github.com/chr15m/blender-hylang-live-code][https://github.com/chr15m/blender-hylang-live-code]] |

**** Good reads
| How Hy backported "yield from" to Python 2 | [[http://dustycloud.org/blog/how-hy-backported-yield-from-to-python2/][http://dustycloud.org/blog/how-hy-backported-yield-from-to-python2/]] |

** Mochi -  Dynamically typed programming language for functional programming and actor-style programming

| sources | [[https://github.com/i2y/mochi][https://github.com/i2y/mochi]] |
| doc     |                              |
| v1 ?    | no                           |
| created | v0.1 on december, 2014       |

- translates to Python3's AST/bytecode

**** Language features
 - Python-like syntax
 - pipeline operator (multiline ok)
 : range(1, 31)
 : |> map(fizzbuzz)
 : |> pvector()
 : |> print()
 - tail-recursion optimization (self tail recursion only)
 - no loop syntax
 - re-assignments are not allowed in function definition
 - persisent data structures (using Pyrsistent)
 - Pattern matching / Data types, like algebraic data types
 - Syntax  sugar of  anonymous function  definition (=->=  notation and
   =$1= for the arguments)
 - Actor, like the actor of Erlang (using Eventlet)
 - Macro, like the traditional macro of Lisp
 - Anaphoric macros
 - Builtin functions  includes functions exported by  itertools module,
   recipes, functools module and operator module
**** Install

 : pip3 install mochi

**** Editors

 | Atom | [[https://github.com/i2y/language-mochi][https://github.com/i2y/language-mochi]] |

** Coconut - Simple, elegant, Pythonic functional programming

| sources | [[https://github.com/evhub/coconut][https://github.com/evhub/coconut]] |
| doc     | [[https://coconut.readthedocs.io][https://coconut.readthedocs.io]]   |
| v1 ?    | yes, on june, 2016               |
| created | february, 2015 (v0.1)            |

- Coconut compiles  to Python  (not CPython  bytecode, so  it supports
  other Python implementations: PyPy, Jython, etc)
- Coconut code runs on any major Python version, 2 or 3
- all valid Python 3 is valid Coconut: you can write standard Python3 in Coconut.

- *ipython* / jupyter [[http://coconut.readthedocs.io/en/master/DOCS.html#ipython-jupyter-support][support]] (installed by default)

**** Language features
 - pipelines
   : (1, 2) |*> (+) |> sq |> print
   For multiline  pipes, surround  them with parenthesis  (python rule
   that every newline inside parenthesis is ignored):
#+BEGIN_SRC coconut
(
    "hello"
    |> print
)
#+END_SRC
 - pattern matching (=match x in value:=)
 - algeabric data types
 - partial application (=$= sign right after a function name)
   : expnums = map(pow$(2), range(5))
   : expnums |> list |> print
 - lazy lists (surround coma-separated lists with =(|= and =|)=)
 - destructuring assignment
 - function composition (with =..=)
   : fog = f..g
 - prettier lambdas (=->= syntax)
 - parallel programming
 - tail recursion optimization
 - infix notation (like in Haskell with backticks)
 - underscore digits separators (=10_000_000=)
 - decorators support any expression
   : @ wrapper1 .. wrapper2 $(arg)
 - code pass through the compiler
 - ...

**** Install

 : pip install coconut

**** Editors
 - Pygments support

 | Sublime | Coconut |

** Rabbit - a functional language on top of Python (discontinued in favor of Coconut)


| sources | [[https://github.com/evhub/rabbit][https://github.com/evhub/rabbit]] |
| doc     |                                 |
| v1 ?    | yes, on oct, 2014. DISCONTINUED    |
| created | v0.1 on may, 2014               |

From the author's words: ([[https://www.reddit.com/r/Python/comments/4owzu7/coconut_functional_programming_in_python/d4hhfw0][src]])
#+BEGIN_QUOTE
Coconut is my attempt to fix the mistakes I thought I made with Rabbit, namely:

    * Coconut is compiled, while Rabbit is interpreted, making Coconut much faster
    * Coconut is an extension to Python, while Rabbit is a replacement, making Coconut much easier to use
#+END_QUOTE

Quicksort:

#+BEGIN_SRC txt
qsort(l) = (
    qsort: (as ~ \x\(x @ x<=a)) ++ a ++ qsort: (as ~ \x\(x @ x>a))
    $ a,as = l
    ) @ len:l
#+END_SRC

* Misc
** Pixie, a lightweight and native lisp built in RPython
is built in RPython

- [[https://github.com/pixie-lang/pixie][https://github.com/pixie-lang/pixie]]
